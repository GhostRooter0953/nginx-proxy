---
- name: Install certbot
  apt:
    pkg:
      - certbot
    force_apt_get: true
    update_cache: yes
  become: yes

- name: Check is SSL certificates exist
  stat:
    path: /etc/letsencrypt/live/{{ item }}.{{ domain }}
  loop: "{{ sub_domains }}"
  register: ssl

- name: Set fact of SSL certificates
  set_fact:
    proxy: "{{ item.stat.exists }}"
  loop: "{{ ssl.results }}"

- name: Copy nginx vhosts
  template:
    src: "{{ template_path }}"
    dest: "/etc/nginx/sites-available/{{ item.item }}"
  loop: "{{ ssl.results }}"
  when: not item.stat.exists

- name: Create symlinks nginx sites vhost
  file:
    src: '/etc/nginx/sites-available/{{ item.item }}'
    dest: '/etc/nginx/sites-enabled/{{ item.item }}'
    state: link
  loop: "{{ ssl.results }}"
  when: not item.stat.exists

- name: Nginx reload
  systemd:
    name: nginx
    state: reloaded
  loop: "{{ ssl.results }}"
  when: not item.stat.exists

- name: Create SSL certificate if it's not exist
  shell:
    cmd: certbot certonly --webroot -w /var/www/html/ --email onion-look@onion.io --agree-tos --non-interactive -d {{ item.item }}.{{ domain }}
  loop: "{{ ssl.results }}"
  when: not item.stat.exists

- name: Check SSL certificates finally exist
  stat:
    path: /etc/letsencrypt/live/{{ item }}.{{ domain }}
  loop: "{{ sub_domains }}"
  register: ssl

- name: Set finally fact of SSL certificates
  set_fact:
    proxy: "{{ item.stat.exists }}"
  loop: "{{ ssl.results }}"

- name: Copy nginx vhosts
  template:
    src: "{{ template_path }}"
    dest: "/etc/nginx/sites-available/{{ item.item }}"
  loop: "{{ ssl.results }}"

- name: Create symlinks nginx sites vhost
  file:
    src: '/etc/nginx/sites-available/{{ item.item }}'
    dest: '/etc/nginx/sites-enabled/{{ item.item }}'
    state: link
  loop: "{{ ssl.results }}"

- name: Nginx finally reload
  systemd:
    name: nginx
    state: reloaded
